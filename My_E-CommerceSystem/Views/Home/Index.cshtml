@model ProductViewModel

@{
    ViewData["Title"] = "Home Page";
    SelectList Categories = new SelectList(Model.Categories, "Id", "CategoryName");
}
<div class="my-2">

    <form asp-action="Index" class="row row-cols-lg-auto g-3 align-items-center">
        <div class="col-12 col-lg-6">
            <label class="visually-hidden" for="CategoryId">Category</label>
            @Html.DropDownListFor(m => m.CategoryId, Model.Categories.Select(c => new SelectListItem { Text = c.CategoryName, Value = c.Id.ToString(), Selected = c.Id == Model.CategoryId }), "Select Category", new { @class = "form-control" })
        </div>

        <div class="col-12 col-lg-12">
            <label class="visually-hidden" asp-for="Sterm">Search by title</label>
            <div class="input-group">
                <div class="input-group-text"></div>
                @Html.TextBoxFor(m => m.Sterm, new { @class = "form-control form-control-lg", placeholder = "Search by title" })
            </div>
        </div>

        <div class="col-12 col-lg-6">
            <button type="submit" class="btn btn-primary">Search</button>
            <a href="@Url.Action("Index", "Home")" class="btn btn-dark">Reset</a>
        </div>
    </form>
</div>



<div class="w-100 mt-4 d-flex flex-wrap ">
    @foreach (var product in Model.Products)
    {
        <div class="card mx-3 mb-4" style="width: 11rem;">

            <img style="width:100%;height:180px" src="@Url.Content("~/Images/" + product?.Category?.CategoryName + "/" + product?.Image)" class="card-img-top" alt="...">

            <div class="card-body d-flex flex-column">
                <h5 class="card-title">@Html.DisplayFor(m => product.Name)</h5>
                <p class="card-text flex-grow-1">
                    <b>Category: </b>@product?.Category?.CategoryName <br />
                    <b>Quantity: </b> <span id="availability_@product?.Id">@product?.QuantityInventory</span> <br />
                    <b>Price: </b>@product?.PriceUnit $ <br />
                </p>
                <a href="@Url.Action("Details", "Product", new { id = product?.Id })" class="btn btn btn-primary">Details</a>

                <button type="button" onclick="add(@product?.Id)" class="btn btn-primary align-self">Add to cart</button>
            </div>
        </div>
    }
</div>

@section Scripts{
    <script>
        async function add(productId) {
            var usernameEl = document.getElementById("username");
            if (usernameEl == null) {
                window.location.href = "/Identity/Account/Login";
            }
            try {
                var response = await fetch(`/ShoppingCart/AddItem?productId=${productId}`);
                if (response.status == 200) {
                    // Fetch the updated product availability
                    var availabilityResponse = await fetch(`/Product/GetAvailability?productId=${productId}`);
                    if (availabilityResponse.status == 200) {
                        var availabilityResult = await availabilityResponse.json();

                        // Update the product's availability on the page
                        var availabilityEl = document.getElementById(`availability_${productId}`);
                        if (availabilityEl) {
                            availabilityEl.innerHTML = availabilityResult;
                        }
                    }

                    // Update the cart count
                    var result = await response.json();
                    var cartCountEl = document.getElementById("cartCount");
                    cartCountEl.innerHTML = result;
                    window.location.href = "#cartCount";
                }
            }
            catch (err) {
                console.log(err);
            }
        }
    </script>
}

